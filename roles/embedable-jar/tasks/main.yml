---

#
# Initialize
#

- name: Create app dir
  file: path="{{ app__dir }}/jar" state=directory recurse=yes
  tags: initialize

- name: Create log dir
  file: path="{{ app__dir }}/log" state=directory recurse=yes
  tags: initialize

- name: Setup app directory permissions
  file: path="{{ app__dir }}" state=directory recurse=yes owner="{{ app__user }}" group="{{ app__group }}"
  tags: initialize

#
# Configuration
#
- name: Check if firewalld is enabled
  shell: systemctl is-enabled --quiet firewalld
  register: is_firewalld_enabled
  failed_when: false
  when: ansible_distribution_major_version | int >= 7
  tags: configure

- name: Allow app port through firewalld
  firewalld:
    port: "{{ app__port }}/tcp"
    permanent: true
    immediate: yes
    state: enabled
  when: (ansible_distribution_major_version | int >= 7) and (is_firewalld_enabled.rc == 0) and (app__port is defined)
  tags: configure

- name: Copy init script
  template:
    src: init_script.j2
    dest: "/etc/init.d/{{ app__init_script_name }}"
    mode: 0764
  tags: configure

#- name: Refresh systemctl daemon list
#  shell: systemctl daemon-reload
#  when: ansible_distribution_major_version | int >= 7
#  tags: configure

# TODO enable root to run init script in selinux
- name: Register init script for autostartup
  command: "sudo chkconfig helloworld-init-dev on"
#    name: "{{ app__init_script_name }}"
#    enabled: yes
  tags: configure

# Get list of static files to copy
- name: Get list of static files to copy
  local_action: shell if [ -d "{{ role_path }}/files/{{ project_artifact_id }}/{{ env }}" ]; then ls "{{ role_path }}/files/{{ project_artifact_id }}/{{ env }}"; fi
#  become: no
  changed_when: false
  register: static_files_list
  tags: configure

- name: Copy static files
  copy: 
    src: "{{ project_artifact_id }}/{{ env }}/{{ item }}" 
    dest: "{{ app__dir }}/{{ item }}" 
    owner: "{{ app__user }}" 
    group: "{{ app__group }}" 
    mode: 0644
  with_items: "{{ static_files_list.stdout_lines }}"
  tags: configure


# Copy configuration files
- name: Get list of property files to copy
  local_action: shell if [ -d "{{ role_path }}/templates/{{ project_artifact_id }}/{{ env }}" ]; then ls "{{ role_path }}/templates/{{ project_artifact_id }}/{{ env }}"; fi
#  become: no
  changed_when: false
  register: property_files_list
  tags: configure

- name: Copy property files
  template: 
    src: "{{ project_artifact_id }}/{{ env }}/{{ item }}" 
    dest: "{{ app__dir }}/{{ item }}" 
    owner: "{{ app__user }}" 
    group: "{{ app__group }}" 
    mode: 0644
  with_items: "{{ property_files_list.stdout_lines }}"
  tags: configure

- name: Copy server.properties
  template: src="server.properties" dest="{{ app__dir }}/server.properties" owner="{{ app__user }}" group="{{ app__group }}" mode=0644
  when: (app__port is defined) and (app__context_path is defined)
  tags: configure

#
# Deploy Application
#

- include_tasks: ../../common/tasks/download_maven_artifact.yml
  vars:
    download_group_id: "{{ project_group_id }}"
    download_artifact_id: "{{ app__artifact_id }}"
    download_project_version: "{{ project_version }}"
    download_project_version_classifier: "{{ app__artifact_version_classifier }}"

- name: Deploy jar to server
  copy:
    src: "{{ local_tmp_file }}"
    dest: "{{ app__dir }}/jar/{{ app__artifact_id }}.jar"
    owner: "{{ app__user }}"
    group: "{{ app__group }}"
    mode: "0644"
  tags: deploy

- include_tasks: ../../common/tasks/download_maven_artifact.yml
  vars:
    download_group_id: "{{ item.group_id }}"
    download_artifact_id: "{{ item.artifact_id }}"
    download_project_version: "{{ item.version }}"
    download_project_version_classifier: "{{ item.classifier }}"
    local_tmp_file: "/tmp/{{ item.artifact_id }}-{{ item.version }}-{{ item.classifier }}_{{ execution_uuid }}.{{ project_extension }}"
  when: "additional_artifacts is defined"
  with_items: "{{ additional_artifacts }}"

- name: Deploy additional jars to server
  copy:
    src: "/tmp/{{ item.artifact_id }}-{{ item.version }}-{{ item.classifier }}_{{ execution_uuid }}.{{ project_extension }}"
    dest: "{{ app__dir }}/jar/{{ item.artifact_id }}.jar"
    owner: "{{ app__user }}"
    group: "{{ app__group }}"
    mode: "0644"
  when: "additional_artifacts is defined"
  with_items: "{{ additional_artifacts }}"
  tags: deploy

#
# Run always on end
#
- name: Start service
  service: name="{{ app__init_script_name }}" state=started enabled=yes
  tags: always

#- name: Wait for application port to open
#  wait_for:
#    host: "{{ app__host }}"
#    port: "{{ app__port }}"
#    delay: 10
#    timeout: 120
#  when: app__port is defined
#  tags: always

#- name: Check that application is up
#  command: curl -sS http://{{ inventory_hostname }}:{{ app__port }}{% if app__healthstatus_actuator %}/actuator/health{% else %}{{ app__context_path}}/services/healthstatus{% endif %}
#  when: (app__context_path is defined) and ({{ app__context_path | length }} > 0)
#  changed_when: false
#  register: curl_result
#  tags: always

#
# Run tests if app has them
#
- name: Check if test script exists
  stat: path="{{ app__dir }}/scripts/test_deploy.sh"
  register: test_script_file
  tags: always

- name: Run test script if exists
  command: "{{ app__dir }}/scripts/test_deploy.sh"
  when: test_script_file.stat.exists == true
  changed_when: false
  tags: always

- name: Add logging config to awslogs.conf
  blockinfile:
    path: /etc/awslogs/awslogs.conf
    block: |
      [{{ app__dir }}/logs/{{ app__artifact_id }}.log]
      datetime_format = %b %d %H:%M:%S
      file = {{ app__dir }}/logs/{{ app__artifact_id }}.log
      buffer_duration = 5000
      log_stream_name = {instance_id}
      initial_position = start_of_file
      log_group_name = {{ app__dir }}/logs/{{ app__artifact_id }}.log
    mode: 0666
  tags: always

- name: Restart awslogs
  service:
    name: awslogs
    state: restarted
  tags: always

